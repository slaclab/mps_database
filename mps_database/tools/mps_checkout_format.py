#This script formats the logs generated by mps_checkout.py to generate the tex files for each section
#

import sys
import os
from datetime import datetime, date
import argparse
import json

def process_args(argv):
     parser=argparse.ArgumentParser(description='This script is used to verify the MPS system set points')
     parser.add_argument('-SrcFile', required=True, type = str, help='The path and filename of the checkout log dictionary')
     parser.add_argument('-LogFileLoc', required=True, type = str, help='The directory where the log files will be written to')
     parser.add_argument('-LogFileName', required=True, type = str, help='The name of the written log file without postfix ')
     parser.add_argument('-ErrorFile', required=True, type = str, help="File and path to a file where faults will be logged")
     parser=parser.parse_args()
     
     return parser

def thresholdRow(row, device, checkoutLog):
    state = checkHighLow('threshold', row, device, checkoutLog)

    thresholdRow = "{} & Pass\\\\ \n".format(row)
    thresholdRow += "\hline\n" 
    
    return thresholdRow
        
def makeThresholdTable(device, checkoutLog):
    thresholdNum = checkoutLog[device]['ThresholdNum'][0]
    table = "\\begin{center}\n"
    table += "\\begin{tabular}{ | m{2cm} | m{2cm} |} \n"
    table += "\hline\n"
    table += "Threshold Number & Result \\\\ \n"
    table += "\hline\n"
    for i in range(thresholdNum):
        table += thresholdRow(i, device, checkoutLog)
    table += "\end{tabular}\n"
    table += "\end{center}\n"
    
    return table

def checkHighLow(itemType, row, device, checkoutLog):
    error_str = "AppID:{} itemType:{} row:{} device:{}\n".format(checkoutLog['AppInfo']['AppID'], itemType, row, device)
    try:
        highItem = checkoutLog[device]['{}H{}'.format(itemType,row)]
        lowItem = checkoutLog[device]['{}L{}'.format(itemType,row)]
    except KeyError:
        error_str += "Significant fault reported see dictionay for details\n"
        raise RuntimeError(error_str)
        
    if(highItem != lowItem):
        error_str += "High does not equal Low\n"
        raise RuntimeError(error_str)
    if(highItem[2] == 0):
        error_str += "Script reports fault"
        raise RuntimeError(error_str)
    if(highItem[1] != highItem[2]):
        error_str += "User and script disagree\n"
        raise RuntimeError(error_str)
    if(highItem[2] != 1):
        error_str += "System reported fault\n"
        raise RuntimeError(error_str)
    return highItem[0]

def logicRow(row, device, checkoutLog):
    linacLogic = checkHighLow('LINAC', row, device, checkoutLog)
    diagLogic = checkHighLow('DIAG0', row, device, checkoutLog)
    hxuLogic = checkHighLow('HXU', row, device, checkoutLog)
    sxuLogic =  checkHighLow('SXU', row, device, checkoutLog)
    
    logicRow = "{} & {} & {} & {} & {} \\\\ \n".format(row, linacLogic, diagLogic, hxuLogic, sxuLogic)
    logicRow += "\hline\n"
    
    return logicRow
    

def makeLogicTable(device, checkoutLog):
    thresholdNum = checkoutLog[device]['ThresholdNum'][0]
    
    table = "\\begin{center}\n"
    table += "\\begin{tabular}{ | m{2cm} | m{2cm} | m{2cm} | m{2cm} | m{2cm} |} \n"
    table += "\hline\n"
    table += "Threshold Number & LINAC & DIAG & HXU & SXU  \\\\ \n"
    table += "\hline\n"
    for i in range(thresholdNum):
        table += logicRow(i, device, checkoutLog)
    table += "\end{tabular}\n"
    table += "\end{center}\n"
    
    return table 
     
def main(argv):
    controls =  process_args(argv)
    
    with open(controls.SrcFile) as json_file:
        checkoutLog = json.load(json_file)
       
    formatedLog = "\section{App ID "+str(checkoutLog['AppInfo']['AppID'])+"}\n"
    formatedLog += "Tester: {} {}".format(checkoutLog['UserInfo']['FirstName'], checkoutLog['UserInfo']['LastName']) + "\n" 
    formatedLog += "Date Preformed: {}".format(checkoutLog['UserInfo']['DateTime'][0:9]) + "\n"
    formatedLog += "Time Preformed: {}".format(checkoutLog['UserInfo']['DateTime'][10:18]) + "\n"
    formatedLog += "Software Version: {}".format(checkoutLog['AppInfo']['SoftwareVersion'][0]) + "\n"
    formatedLog += "Firmware Version: {}".format(checkoutLog['AppInfo']['FirmwareVersion'][0]) + "\n"
    
    
    try:    
        for device in checkoutLog['AppInfo']['devices']:
            formatedLog += "\subsection{"+str(device).replace("_","\_")+"}\n"
            formatedLog += "Threshold Exceeded Test:\\\\ \n"
            formatedLog += makeThresholdTable(device, checkoutLog)
            formatedLog += "Logic State Test:\\\\ \n"
            formatedLog += makeLogicTable(device, checkoutLog)
    except RuntimeError as e:
        print("Fault reported in dictionary")
        print(str(e))
        errorFile = open(controls.ErrorFile, 'a')
        errorFile.write(str(e))
        return 1
    
    
    formatedCheckoutFile = open(os.path.join(controls.LogFileLoc, controls.LogFileName+'.tex'), 'w')
    
    formatedCheckoutFile.write(formatedLog)
    
    return 0
    
if __name__ == "__main__":
    main(sys.argv[1:])
